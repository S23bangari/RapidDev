const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  
    export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });
  
    const CodegenerationConfig = {
      temperature: 1,
      topP: 0.95,
      topK: 40,
      maxOutputTokens: 8192,
      responseMimeType: "application/json",
    };
  
    export const GenAiCode = model.startChat({
      generationConfig: CodegenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "Create Todo app: Generate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `,\n\n\n\n}\n\n// - The lucide-react library is also available to be imported IF NECCESARY ONLY FOR THE FOLLOWING ICONS: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Clock, Heart, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, ArrowRight. Here's an example of importing and using one: import { Heart } from \"lucide-react\"\\` & \\<Heart className=\"\"  />\\. PLEASE ONLY USE THE ICONS IF AN ICON IS NEEDED IN THE USER'S REQUEST.\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"Todo App\",\n  \"explanation\": \"This React project implements a Todo application using Tailwind CSS for styling. It's structured into components organized in separate folders for better maintainability. The app allows users to add, edit, and delete tasks. It leverages react-chartjs-2 for charts and date-fns for date formatting. The design focuses on a user-friendly interface with a production-ready feel, utilizing icons from lucide-react where necessary.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoList from './components/TodoList';\\nimport TodoForm from './components/TodoForm';\\nimport { useState, useEffect } from 'react';\\nimport { format } from 'date-fns';\\nimport Chart from './components/Chart';\\n\\n\\nfunction App() {\\n  const [todos, setTodos] = useState(() => {\\n    const savedTodos = localStorage.getItem('todos');\\n    if (savedTodos) {\\n      return JSON.parse(savedTodos);\\n    } else {\\n      return [];\\n    }\\n  });\\n\\n  useEffect(() => {\\n    localStorage.setItem('todos', JSON.stringify(todos));\\n  }, [todos]);\\n\\n  const addTodo = (text) => {\\n    const newTodo = {\\n      id: Date.now(),\\n      text,\\n      completed: false,\\n      createdAt: new Date()\\n    };\\n    setTodos([...todos, newTodo]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n    setTodos(\\n      todos.map((todo) =>\\n        todo.id === id ? { ...todo, completed: !todo.completed } : todo\\n      )\\n    );\\n  };\\n\\n  const deleteTodo = (id) => {\\n    setTodos(todos.filter((todo) => todo.id !== id));\\n  };\\n\\n  const editTodo = (id, newText) => {\\n    setTodos(\\n      todos.map((todo) => (todo.id === id ? { ...todo, text: newText } : todo))\\n    );\\n  };\\n\\n  // Prepare data for the chart\\n  const completedTodosCount = todos.filter(todo => todo.completed).length;\\n  const incompleteTodosCount = todos.length - completedTodosCount;\\n  const chartData = {\\n    labels: ['Completed', 'Incomplete'],\\n    datasets: [\\n      {\\n        label: 'Todos',\\n        data: [completedTodosCount, incompleteTodosCount],\\n        backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)'],\\n        borderWidth: 1,\\n      },\\n    ],\\n  };\\n\\n\\n  return (\\n    <div className=\\\"bg-gray-100 min-h-screen py-10\\\">\\n      <div className=\\\"container mx-auto p-6 bg-white shadow-md rounded-lg\\\">\\n        <h1 className=\\\"text-3xl font-semibold mb-6 text-center text-blue-700\\\">My Todo List üìù</h1>\\n        <TodoForm addTodo={addTodo} />\\n        <TodoList\\n          todos={todos}\\n          toggleComplete={toggleComplete}\\n          deleteTodo={deleteTodo}\\n          editTodo={editTodo}\\n        />\\n        <div className=\\\"mt-8\\\">\\n          <Chart chartData={chartData} />\\n        </div>\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default App;\"\n    },\n    \"/components/TodoForm.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nfunction TodoForm({ addTodo }) {\\n  const [text, setText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim()) {\\n      addTodo(text);\\n      setText('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"mb-4 flex\\\">\\n      <input\\n        type=\\\"text\\\"\\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n        className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n        placeholder=\\\"Add a new todo...\\\" üòÉ\\n      />\\n      <button\\n        type=\\\"submit\\\"\\n        className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline ml-2\\\"\\n      >\\n        <Plus className=\\\"h-5 w-5 inline-block align-middle\\\" />\\n        Add\\n      </button>\\n    </form>\\n  );\\n}\\n\\nexport default TodoForm;\"\n    },\n    \"/components/TodoList.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoItem from './TodoItem';\\n\\nfunction TodoList({ todos, toggleComplete, deleteTodo, editTodo }) {\\n  return (\\n    <div>\\n      {todos.map((todo) => (\\n        <TodoItem\\n          key={todo.id}\\n          todo={todo}\\n          toggleComplete={toggleComplete}\\n          deleteTodo={deleteTodo}\\n          editTodo={editTodo}\\n        />\\n      ))}\\n    </div>\\n  );\\n}\\n\\nexport default TodoList;\"\n    },\n    \"/components/TodoItem.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\nimport { format } from 'date-fns';\\n\\nfunction TodoItem({ todo, toggleComplete, deleteTodo, editTodo }) {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editText, setEditText] = useState(todo.text);\\n\\n  const handleEdit = () => {\\n    editTodo(todo.id, editText);\\n    setIsEditing(false);\\n  };\\n\\n  return (\\n    <div className=\\\"flex justify-between items-center py-2 border-b border-gray-200\\\">\\n      <div className=\\\"flex items-center\\\">\\n        <input\\n          type=\\\"checkbox\\\"\\n          checked={todo.completed}\\n          onChange={() => toggleComplete(todo.id)}\\n          className=\\\"mr-2 h-5 w-5 text-blue-600 rounded focus:ring-blue-500 border-gray-300\\\"\\n        />\\n        {\\n          isEditing ? (\\n            <input\\n              type=\\\"text\\\"\\n              value={editText}\\n              onChange={(e) => setEditText(e.target.value)}\\n              className=\\\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\\\"\\n            />\\n          ) : (\\n            <span className={`text-gray-700 ${todo.completed ? 'line-through text-gray-500' : ''}`}>\\n              {todo.text}\\n            </span>\\n          )\\n        }\\n      </div>\\n\\n      <div>\\n        {\\n          isEditing ? (\\n            <>\\n              <button onClick={handleEdit} className=\\\"bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline mr-2\\\">\\n                <Check className=\\\"h-4 w-4 inline-block align-middle\\\" />\\n                Save\\n              </button>\\n              <button onClick={() => setIsEditing(false)} className=\\\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline\\\">\\n                <X className=\\\"h-4 w-4 inline-block align-middle\\\" />\\n                Cancel\\n              </button>\\n            </>\\n          ) : (\\n            <>\\n              <button onClick={() => setIsEditing(true)} className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline mr-2\\\">\\n                <Edit className=\\\"h-4 w-4 inline-block align-middle\\\" />\\n                Edit\\n              </button>\\n              <button onClick={() => deleteTodo(todo.id)} className=\\\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-2 rounded focus:outline-none focus:shadow-outline\\\">\\n                <Trash className=\\\"h-4 w-4 inline-block align-middle\\\" />\\n                Delete\\n              </button>\\n              <span className=\\\"text-xs text-gray-500\\\">Created at: {format(todo.createdAt, 'yyyy-MM-dd HH:mm')}</span>\\n            </>\\n          )\\n        }\\n      </div>\\n    </div>\\n  );\\n}\\n\\nexport default TodoItem;\"\n    },\n    \"/components/Chart.js\": {\n      \"code\": \"import React from 'react';\\nimport { Doughnut } from 'react-chartjs-2';\\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\\n\\nChartJS.register(ArcElement, Tooltip, Legend);\\n\\nfunction Chart({ chartData }) {\\n  return (\\n    <Doughnut data={chartData} />\\n  );\\n}\\n\\nexport default Chart;\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoForm.js\",\n    \"/components/TodoList.js\",\n    \"/components/TodoItem.js\",\n    \"/components/Chart.js\"\n  ]\n}\n```"},
          ],
        },
      ],
    })